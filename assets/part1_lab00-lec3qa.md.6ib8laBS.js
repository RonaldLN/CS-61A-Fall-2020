import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.DxPg2OQI.js";const l="/CS-61A-Fall-2020/assets/cs61a_10.aeVvMK8B.png",t="/CS-61A-Fall-2020/assets/cs61a_11.5UQLheYe.png",p="/CS-61A-Fall-2020/assets/cs61a_12.IwDJa0xf.png",e="/CS-61A-Fall-2020/assets/cs61a_34.DZuwcnMi.png",h="/CS-61A-Fall-2020/assets/cs61a_14.DN-PK_Bp.png",k="/CS-61A-Fall-2020/assets/cs61a_44.BqitKCDB.png",r="/CS-61A-Fall-2020/assets/cs61a_35.C5phN65a.png",o="/CS-61A-Fall-2020/assets/cs61a_36.BCoV8a-7.png",c="/CS-61A-Fall-2020/assets/cs61a_47.BcddLkQP.png",d="/CS-61A-Fall-2020/assets/cs61a_51.DU5ik6IT.png",g="/CS-61A-Fall-2020/assets/cs61a_50.DCGhqzli.png",F="/CS-61A-Fall-2020/assets/cs61a_52.CvW2flMu.png",E="/CS-61A-Fall-2020/assets/cs61a_53.8DKU31H3.png",y="/CS-61A-Fall-2020/assets/cs61a_62.nbt6ylvk.png",u="/CS-61A-Fall-2020/assets/cs61a_69.BUQufm1N.png",P=JSON.parse('{"title":"Lab 00 --- Lecture 3 Q&A","description":"","frontmatter":{},"headers":[],"relativePath":"part1/lab00-lec3qa.md","filePath":"part1/lab00-lec3qa.md","lastUpdated":1710357288000}'),_={name:"part1/lab00-lec3qa.md"},m=n('<h1 id="lab-00-lecture-3-q-a" tabindex="-1">Lab 00 --- Lecture 3 Q&amp;A <a class="header-anchor" href="#lab-00-lecture-3-q-a" aria-label="Permalink to &quot;Lab 00 --- Lecture 3 Q&amp;A&quot;">​</a></h1><h2 id="lab-00" tabindex="-1">Lab 00 <a class="header-anchor" href="#lab-00" aria-label="Permalink to &quot;Lab 00&quot;">​</a></h2><h3 id="_1" tabindex="-1">1 <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;1&quot;">​</a></h3><p>运行hw或者lab任务的对应命令时，都加上 <code>--local</code> ，就只在本地运行，不会上传然后要求输入邮箱，如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-q </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-u] --local</span></span></code></pre></div><h2 id="lecture-2-functions" tabindex="-1">Lecture 2 Functions <a class="header-anchor" href="#lecture-2-functions" aria-label="Permalink to &quot;Lecture 2 Functions&quot;">​</a></h2><h3 id="_1-1" tabindex="-1">1 <a class="header-anchor" href="#_1-1" aria-label="Permalink to &quot;1&quot;">​</a></h3><p>变量可以 “指向” 一个函数</p><p><img src="'+l+'" alt="cs61a_10" loading="lazy"></p><h3 id="_2" tabindex="-1">2 <a class="header-anchor" href="#_2" aria-label="Permalink to &quot;2&quot;">​</a></h3><p>cs61a中使用的可以显示python程序中 environment 、 frame 等信息的在线网站：</p><p><a href="https://pythontutor.com/cp/composingprograms.html#mode=edit" target="_blank" rel="noreferrer">Online Python Tutor - Composing Programs - Python 3</a></p><blockquote><p>John DeNero 编写的cs61a的配套英文原版教材：</p><p><a href="https://www.composingprograms.com/" target="_blank" rel="noreferrer">Composing Programs</a></p><p>在github上发现的其对应仓库：</p><p><a href="https://github.com/DestructHub/composing-programs" target="_blank" rel="noreferrer">DestructHub/composing-programs: Annotation and code about SICP Python (github.com)</a></p><p>github上发现的非官方的还在翻译(23/7/21发现)的中文版的仓库：</p><p><a href="https://github.com/csfive/composing-programs-zh" target="_blank" rel="noreferrer">csfive/composing-programs-zh: 🚧 CS61A 教材《Composing Programs》即《计算机程序的构造与解释》Python 版本的中文翻译 (github.com)</a></p><p>其对应网页：</p><p><a href="https://sicp.csfive.works/" target="_blank" rel="noreferrer">CSfive | CSfive</a></p></blockquote><h3 id="_3" tabindex="-1">3 <a class="header-anchor" href="#_3" aria-label="Permalink to &quot;3&quot;">​</a></h3><p>调用函数时，会创建一个新的frame，且frame的名字为函数本身的名字(即创建时的名字 (如果是lambda匿名函数则 没有名字/名字为lambda))，</p><p><img src="'+t+'" alt="cs61a_11" loading="lazy"></p><p>即如果用某个变量指向了函数，在用变量调用函数的时，创建的frame名字仍为原函数名</p><p><img src="'+p+'" alt="cs61a_12" loading="lazy"></p><h3 id="_4" tabindex="-1">4 <a class="header-anchor" href="#_4" aria-label="Permalink to &quot;4&quot;">​</a></h3><p><img src="'+e+'" alt="cs61a_34" loading="lazy"></p><p>python中，赋值可以同时对两个变量进行，会使交换变量的值等操作更方便，如</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b, a</span></span></code></pre></div><h2 id="lecture-2-q-a" tabindex="-1">Lecture 2 Q&amp;A <a class="header-anchor" href="#lecture-2-q-a" aria-label="Permalink to &quot;Lecture 2 Q&amp;A&quot;">​</a></h2><h3 id="_1-2" tabindex="-1">1 <a class="header-anchor" href="#_1-2" aria-label="Permalink to &quot;1&quot;">​</a></h3><p><img src="'+h+`" alt="cs61a_14" loading="lazy"></p><p>在哪个frame中定义(define)的函数，其parent就是哪个frame，除了Global frame其他都有parent</p><h2 id="hw-01" tabindex="-1">HW 01 <a class="header-anchor" href="#hw-01" aria-label="Permalink to &quot;HW 01&quot;">​</a></h2><h3 id="_1-3" tabindex="-1">1 <a class="header-anchor" href="#_1-3" aria-label="Permalink to &quot;1&quot;">​</a></h3><p>Q3，可以用总的减去最大的，得到最小的两个</p><details class="details custom-block"><summary>代码</summary><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> two_of_three</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></details><h3 id="_2-1" tabindex="-1">2 <a class="header-anchor" href="#_2-1" aria-label="Permalink to &quot;2&quot;">​</a></h3><p>Q5</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with_if_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result = with_if_function()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    42</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    47</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print(result)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    None</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> if_function(cond(), true_func(), false_func())</span></span></code></pre></div><p>由于在 <code>return</code> 语句中，填入的时调用的函数( <code>true_func()</code> 和 <code>false_func()</code> )，运行的顺序是 先进行 <code>true_func()</code> 和 <code>false_func()</code> 两个函数的调用，再将他们的返回值传递给 <code>if_function()</code> 中，所以(由于两个函数被调用了) 42和47都会输出</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with_if_statement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result = with_if_statement()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    47</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print(result)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    None</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cond():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true_func()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false_func()</span></span></code></pre></div><p>而在这个函数中，则只会调用 <code>true_func()</code> 和 <code>false_func()</code> 其中一个函数，因此只会输出一个数字</p><details class="details custom-block"><summary>代码</summary><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> if_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(condition, true_result, false_result):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Return true_result if condition is a true value, and</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    false_result otherwise.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">if_function(True, 2, 3)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">if_function(False, 2, 3)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">if_function(3==2, 3+2, 3-2)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">if_function(3&gt;2, 3+2, 3-2)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true_result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false_result</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with_if_statement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result = with_if_statement()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    47</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print(result)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    None</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cond():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true_func()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> false_func()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with_if_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result = with_if_function()</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    42</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    47</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">print(result)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    None</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> if_function(cond(), true_func(), false_func())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;*** YOUR CODE HERE ***&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> true_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;*** YOUR CODE HERE ***&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> false_func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;*** YOUR CODE HERE ***&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">47</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></details><h2 id="homework-1-hints" tabindex="-1">Homework 1 Hints <a class="header-anchor" href="#homework-1-hints" aria-label="Permalink to &quot;Homework 1 Hints&quot;">​</a></h2><h3 id="_1-4" tabindex="-1">1 <a class="header-anchor" href="#_1-4" aria-label="Permalink to &quot;1&quot;">​</a></h3><p>Q3 的两种思路：</p><ol><li>全部的结果取最小</li><li>全部平方和减去最大平方</li></ol><p><img src="`+k+'" alt="cs61a_44" loading="lazy"></p><h2 id="lecture-3-control" tabindex="-1">Lecture 3 Control <a class="header-anchor" href="#lecture-3-control" aria-label="Permalink to &quot;Lecture 3 Control&quot;">​</a></h2><h3 id="_1-5" tabindex="-1">1 <a class="header-anchor" href="#_1-5" aria-label="Permalink to &quot;1&quot;">​</a></h3><p><img src="'+r+'" alt="cs61a_35" loading="lazy"></p><p><code>print()</code> 可以传入多个参数，打印时每个参数之间会空一个空格</p><h3 id="_2-2" tabindex="-1">2 <a class="header-anchor" href="#_2-2" aria-label="Permalink to &quot;2&quot;">​</a></h3><p><img src="'+o+'" alt="cs61a_36" loading="lazy"></p><ul><li><p>在 a函数 参数调用的位置填入 被调用的b函数 ，实际上使先运行 b函数 ，再将b的返回值传入 a函数</p></li><li><p><code>print()</code> 的返回值是 <code>None</code></p></li></ul><p>补充：</p><p><img src="'+c+'" alt="cs61a_47" loading="lazy"></p><h3 id="_3-1" tabindex="-1">3 <a class="header-anchor" href="#_3-1" aria-label="Permalink to &quot;3&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">引述</p><p>An environment is a sequence of frames.</p><ul><li>The global frame alone</li><li>A local, then the global frame</li></ul></div><p><img src="'+d+'" alt="cs61a_51" loading="lazy"></p><p><img src="'+g+'" alt="cs61a_50" loading="lazy"></p><p>变量名在查找对应的值的时候，会从当前的 frame 依次向上(parent frame) 查找值，并绑定最早找到的值，如图中的 <code>square</code> 先在f1中查找(如果f1没有再在Global frame中查找)，并绑定了4 (如果f1中没有 <code>square</code> 对应的值，则会绑定到global frame中的func square)</p><p><mark>此外</mark>，</p><p>图中也可以发现，frame的parent是根据代码的结构来确定的，而不是根据调用的关系来确定的，如 第一张图中 <code>square(square(3))</code> 里面和外面的 <code>square</code> 的 parent 都是 global frame</p><blockquote><p>跟 Lecture 2 Q&amp;A 中一样</p></blockquote><h3 id="_4-1" tabindex="-1">4 <a class="header-anchor" href="#_4-1" aria-label="Permalink to &quot;4&quot;">​</a></h3><p><img src="'+F+'" alt="cs61a_52" loading="lazy"></p><ul><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx.py</span></span></code></pre></div><p>可以将 <code>xxx.py</code> 文件中的代码引入命令行或者终端</p></li><li><p>命令行/终端中使用python时，++ctrl+d++ <code>^D</code> 可以清空界面</p></li></ul><p><img src="'+E+'" alt="cs61a_53" loading="lazy"></p><ul><li><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> doctest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-v] xxx.py</span></span></code></pre></div><p>可以运行 <code>xxx.py</code> 中函数说明语句部分的代码(用于测试函数能否输入正确预期结果)，如果报错会显示出报错信息，如果不报错则不显示信息 而正常显示下一行(如果死循环就一直不显示下一行)，</p><p><code>-v</code> 选项是不报错也能显示每个输入的测试结果，如上图</p></li></ul><h3 id="_5" tabindex="-1">5 <a class="header-anchor" href="#_5" aria-label="Permalink to &quot;5&quot;">​</a></h3><p>真值为<strong>假</strong>的值： <code>False</code> , <code>0</code> , <code>&#39;&#39;</code> , <code>None</code> 等等</p><p>其余其他值基本上都为真</p><h3 id="_6" tabindex="-1">6 <a class="header-anchor" href="#_6" aria-label="Permalink to &quot;6&quot;">​</a></h3><p><img src="'+y+`" alt="cs61a_62" loading="lazy"></p><p>老师写分解质因数的思路值得学习：</p><p>将问题分解成两步：</p><ol><li>一个数的最小因数(因为要求要升序)</li><li>再循环找最小因数，从而获得升序的分解质因数</li></ol><p>并且将找最小的因数这个功能单独写成一个函数，这样看起来就很清晰</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prime_factors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Print the prime factors of n in non-decreasing order.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prime_factors(8)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prime_factors(9)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prime_factors(10)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prime_factors(11)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    11</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prime_factors(12)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prime_factors(858)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    11</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    13</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> smallest_prime_factor(n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> smallest_prime_factor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;Return the smallest k &gt; 1 that evenly divides n.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k</span></span></code></pre></div><h2 id="lecture-3-q-a" tabindex="-1">Lecture 3 Q&amp;A <a class="header-anchor" href="#lecture-3-q-a" aria-label="Permalink to &quot;Lecture 3 Q&amp;A&quot;">​</a></h2><h3 id="_1-6" tabindex="-1">1 <a class="header-anchor" href="#_1-6" aria-label="Permalink to &quot;1&quot;">​</a></h3><p><img src="`+u+`" alt="cs61a_69" loading="lazy"></p><p>由于<strong>同一个函数内的同一个变量名必须指向同一个框架下的东西</strong>，所以</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f()</span></span></code></pre></div><p><code>x = 3</code> 这行已经对local框架下的x赋值，所以 f 函数内的x就都只能绑定local框架下的值，不能绑定母框架下的值</p><p>而第一个 <code>print(x)</code> 在执行时，(local框架下的)变量x还并未赋值，所以会报错，</p><p>如果去掉 <code>x = 3</code> 那么程序就不会报错</p><p><mark><a href="https://ronaldln.github.io/MyPamphlet/Notes%20of%20Courses/CS61A/#3_12" target="_blank" rel="noreferrer">Lecture 16</a>中也说到了这一点</mark></p>`,83),C=[m];function f(b,q,B,A,D,v){return i(),a("div",null,C)}const w=s(_,[["render",f]]);export{P as __pageData,w as default};
